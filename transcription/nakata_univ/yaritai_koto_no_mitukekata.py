import json
from copy import deepcopy as dc

import util

class Source:
    title = "やりたいことの見つけ方"
    url = [
        "https://www.youtube.com/watch?v=sk23TqDytzI",
        "https://www.youtube.com/watch?v=4KTC2TF2WsY"
    ]
    book_title = "世界一やさしい「やりたいこと」の見つけ方"

class やりたいことの見つけ方:
    def やりたいことを見つける(self):
        print("--- start ---")
        print("紙とペンを用意して、自分の回答をメモしてください")

        _価値観, _才能, _情熱 = self.価値観_才能_情熱_を確認する()

        やりたいこと = self.情熱_才能_でやりたいことをいくつか挙げる(_情熱, _才能)

        絞ったやりたいこと = self.仕事の目的でやりたいことを絞る(やりたいこと)

        print("絞ったやりたいこと　について、手段を調べて実行しましょう。")
        print("---  end  ---")

    def 価値観_才能_情熱_を確認する(self):
        # 大事なこと
        _価値観 = 価値観()
        _価値観.確認する()

        # 得意なこと
        _才能 = 才能()
        _才能.確認する()

        # 好きなこと
        _情熱 = 情熱()
        _情熱.確認する()

        return _価値観, _才能, _情熱

    def 情熱_才能_でやりたいことをいくつか挙げる(self, _情熱, _才能):
        print("情熱　×　才能　でやりたいことをいくつか上げましょう")
        print(util.dumps_json({"情熱": _情熱.answers, "才能": _才能.自分の長所まとめ}))

        ans = util.複数の具体的回答を集める("やりたいことは？")

        print("")
        return ans

    def 仕事の目的でやりたいことを絞る(self, やりたいこと):
        print("仕事の目的で、やりたいことを絞りましょう")

        絞ったやりたいこと = []
        for one in やりたいこと:
            if util.yn("「{}」は、あなたの仕事の目的にあっていますか？".format(one)):
                絞ったやりたいこと.append(one)

        print("")
        print("絞ったやりたいこと : {}".format(絞ったやりたいこと))
        return 絞ったやりたいこと

class 価値観():
    def 定義(self):
        """ True:それは価値観である, False: それは価値観ではない """
        # 行動ではなく状態
        if util.yn("こうありたい　ということか？"):
            return True
        if util.yn("こうあるべき　ということか？"):
            return False
        return None

    def 確認する(self) -> "価値観":
        def 質問に答えていく() -> "回答集":
            print("いくつかの質問に答えましょう。")
            qa = util.QA()

            q1_1 = "Q1-1: 尊敬する人は誰ですか？"
            qa.回答収集(q1_1)
            for a in dc(qa.answers)[q1_1]:
                qa.回答収集("Q1-2: なぜ、{}を尊敬しているのですか".format(a))
            qa.回答収集("Q2: 思春期に大きな影響を受けた経験はなんですか？")
            qa.回答収集("Q3: 今の社会に足りないと思うものは？")
            # こういう社会であってほしい、というビジョン
            # 何を大事にするかの、価値観
            qa.回答収集("Q4: 周囲に「自分は何を大切にしてそう？」と聞いたときの回答は？")
            qa.回答収集("Q5-1: 他人に助言するとしたら、伝えたい行動は？（どんなふうに行動したほうがいいよ　と伝えたいか）")
            qa.回答収集("Q5-2: 他人に助言するとしたら、伝えたくない行動は？")

            print("あなたの回答 : {}".format(util.dumps_json(qa.answers)))
            print("")
            return qa.answers

        def 回答からキーワードを抽出する(回答集) -> "キーワード":
            print("あなたの回答のワードから、似たものをまとめましょう")

            キーワード = util.複数の具体的回答を集める("キーワードは？")

            print("")
            return キーワード

        def キーワードにランク付けする(キーワード) -> "キーワードランキング":
            print("キーワード : {}".format(util.dumps_json(キーワード)))
            print("キーワードにランキングを付けましょう。")

            キーワードランキング = {}
            for rank in range(len(キーワード)):
                キーワードランキング[rank + 1] = input("{}位は？：".format(rank + 1))

            print("")
            return キーワードランキング

        def 仕事の目的として翻訳する(キーワードランキング) -> "仕事の目的":
            print("ランキング付けキーワード：{}".format(util.dumps_json(キーワードランキング)))
            print("ランキング付けしたキーワードをもとに、仕事の目的として翻訳してください。")

            仕事の目的 = {}
            for rank in キーワードランキング.keys():
                仕事の目的[rank] = util.複数の具体的回答を集める(
                    "キーワード: {}\n社会にどういった目的で貢献しますか？\nどのような形でありがとうをもらいますか？\n"
                    .format(キーワードランキング[rank])
                )

            print("")
            return 仕事の目的

        self.回答集 = 質問に答えていく()
        self.キーワード = 回答からキーワードを抽出する(self.回答集)
        self.キーワードランキング = キーワードにランク付けする(self.キーワード)
        self.仕事の目的 = 仕事の目的として翻訳する(self.キーワードランキング)

class 才能():
    def 定義(self):
        """ True: それは才能である, False: それは才能ではない """
        if util.yn("それはスキルか"):
            return False
        if util.yn("それは、自分では当たり前に楽にできてしまうことか"):
            return True

    def 確認する(self):
        def 質問に答えていく() -> "回答集":
            print("いくつかの質問に答えましょう。")
            qa = util.QA()

            qa.回答収集("Q1: 一番充実していた体験は？")
            # 成功ではなく、充実。
            qa.回答収集("Q2: 最近イラッとしたのはいつ？")
            # 俺だったらしないのに、と思ったときにイラッとする。
            # 自分の強みを当たり前と思っているがために、他人がそれをできないことにイラッとする、というのが本質。
            qa.回答収集("Q3: 周囲に「自分の長所は？」と聞いたときの回答は？")
            # 意外と答えてくれるし、思ったのと違う評価が来ることがあるはず。
            qa.回答収集("Q4: 仕事をやめたとして、その仕事でもっとやりたかった部分は？")
            qa.回答収集("Q5: これまでで成果が出たことは？")

            print("あなたの回答 : {}".format(util.dumps_json(qa.answers)))
            print("")
            return qa.answers

        def 長所をまとめる(回答集) -> "長所まとめ":
            print("長所をまとめてください")

            自分の長所まとめ = util.複数の具体的回答を集める("キーワードは？")

            print("それが、自分の取扱説明書です。")
            print("")
            return 自分の長所まとめ

        self.回答集 = 質問に答えていく()
        self.自分の長所まとめ = 長所をまとめる(self.回答集)

    def 短所だからこそで探す(self):
        def 短所を挙げる() -> "短所リスト":
            return util.複数の具体的回答を集める("短所をあげてください")

        def 短所に_だからこそ_をつける(短所リスト) -> "才能リスト":
            for 短所 in self.短所リスト:
                self.才能リスト.append(input("「{}」-> だからこそ、、"))
            print(self.才能リスト)

        # 才能は往々にして短所の裏返し
        self.短所リスト = 短所を挙げる()
        self.才能リスト = 短所に_だからこそ_をつける(self.短所リスト)

class 情熱():
    def 定義(self):
        """ True: それは情熱である, False: それは情熱ではない """
        if not util.yn("それは、好きなことか"):
            return False
        if util.yn("それは、生産的だからすきなのか？"):
            return False
        if util.yn("それは、合理的だからすきなのか？"):
            return False
        if util.yn("それは、役に立つからすきなのか？"):
            return False
        if util.yn("それでも、好きか"):
            print(
                "それは、説明できないし、理解してもらえないし、なんかわからないけど、すき　"
                "ということだと思います。"
            )
            return True

    # 重要なのは、価値観を考えて得意なものを見極めてから、好きなことを探ること
    answers = {}
    def 確認する(self) -> "情熱":
        def 質問に答えていく() -> "回答集":
            print("いくつかの質問に答えましょう。")
            qa = util.QA()

            qa.回答収集("Q1: 今、お金を払ってでも勉強したいことはなんですか？")
            qa.回答収集("Q2: 本棚にはどんなジャンルの本がある？")
            qa.回答収集("Q3: 救われたと思えるもの、ジャンルは？")
            qa.回答収集("Q4: お礼を言いたい人、仕事は？")
            qa.回答収集("Q5: 世の中に対して怒りを感じたことは？")

            print("あなたの回答 : {}".format(util.dumps_json(qa.answers)))
            print("")
            return qa.answers

        self.answers = 質問に答えていく()

class なにかやりたいけど症候群:
    原因 = "選択肢が多すぎる状態にあること"
    必要なもの = "基準"
    基準を持つために必要なこと = "明確な自己理解"
    不要なもの = "より多くの情報"

    def 定義():
        """ True: なにかやりたいけど症候群である """
        if util.yn("なにかやりたいけど、やりたいことがないんですよね、って言っているか"):
            return True

    def 診断(self) -> bool:
        result = False
        if util.yn("目の前に選択肢がたくさんある状態ですか？"):
            if util.yn("やりたいことに対して時間や体力やお金などの余裕は足りているか"):
                print("やりたいことが多すぎて、諦めている状態です。")
                result = True
            if util.yn("選択する基準はありますか？"):
                print("選択肢が多すぎて、選べなくなっている状態です。")
                result = True
        return result
